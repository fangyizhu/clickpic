<html>
<head>
    <title>clickpic</title>
    <script>
        // dummy data. this is the way I want the server to send the puzzle data.
        var testpuzzle = {
            dimensions: [5, 5],
            solution: [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1],
            data: {
                x: [[1],[1],[4],[3],[3,1]],
                y: [[1,1],[1,1],[4],[2],[3]]
            },
            image: "https://danbooru.donmai.us/data/__kawashiro_nitori_touhou_drawn_by_ica__20b9c2dd44a2e5d1fff8328441aac750.jpg"
        }
    </script>

    <!-- styling for puzzle elements. will go in separate .css eventually -->
    <style>
        .puzzletable {
            border-collapse: collapse;
            font-family: "Lucida Console", Monaco, monospace;
        }

        .puzzlecell {
            border: 1px solid black;
            padding: 4px;
            min-width: 15px;
            height: 15px;
        }

        .puzzleXHeader {
            text-align: center;
            vertical-align: bottom;
        }

        .puzzleYHeader {
            text-align: right;
            vertical-align: middle;
        }

        .blankCell {
            background-color: white;
            content: "";
        }
        .filledCell {
            background-color: black;
            content: "";
        }
        .disabledCell:after {
            background-color: white;
            color: red;
            content: "x";
            text-align: center;
            vertical-align: middle;
        }
    </style>

    <!-- <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script> -->

    <!-- code for puzzle. will go in separate .js eventually -->
    <script>
        var clickpic = {}

        clickpic.CellStateEnum = {
            BLANK: 'blank',
            FILLED: 'filled',
            DISABLED: 'disabled'
        }

        clickpic.puzzleState = []
        function buildPuzzleHtml(puzzle) {
            var width = puzzle.dimensions[0]
            var height = puzzle.dimensions[1]
            var puzzleHtml = "<table class='puzzletable'>"

            var xHeading = "<tr><td class='puzzlecell' />"
            for (x = 0; x < width; x++) {
                xHeading += "<td class='puzzlecell puzzleXHeader'>" + puzzle.data.x[x].join("<br>") + "</td>"
            }
            xHeading += "</tr>"
            puzzleHtml += xHeading

            for (y = 0; y < height; y++) {
                puzzleHtml += "<tr>"
                puzzleHtml += "<td class='puzzlecell puzzleYHeader'>" + puzzle.data.y[y].join(" ") + "</td>"
                for (x = 0; x < width; x++) {
                    puzzleHtml += "<td class='puzzlecell' id='cell" + (y*width+x) + "' />"
                }
                puzzleHtml += "</tr>"
            }
            puzzleHtml += "</table>"
            document.getElementById('clickpic').innerHTML = puzzleHtml

            for (let i = 0; i < width * height; i++) {
                var cell = document.getElementById('cell' + i)
                cell.onclick = function () {
                    cellClick(i, 0)
                }
                cell.oncontextmenu = function () { // (right click)
                    cellClick(i, 1)
                    return false
                }
            }

            clickpic.puzzleState = new Array(height).fill(new Array(width).fill(clickpic.CellStateEnum.BLANK));
        }
        window.onload = function () { buildPuzzleHtml(testpuzzle) }
        // defining onunload ensures that .onload always runs when forward/back buttons are used
        window.onunload = function () { }

        function cellClick(index, button) {
            var currentState = clickpic.puzzleState[index]

            var toggledValue = clickpic.CellStateEnum.BLANK
            if (button == 0) {
                toggledValue = clickpic.CellStateEnum.FILLED
            } else if (button == 1) {
                toggledValue = clickpic.CellStateEnum.DISABLED
            }

            if (currentState == toggledValue) {
                currentState = clickpic.CellStateEnum.BLANK
            } else {
                currentState = toggledValue
            }

            clickpic.puzzleState[index] = currentState
            updateCell(index)
        }

        function updateCell(index) {
            var element = document.getElementById('cell' + index)
            var currentState = clickpic.puzzleState[index]

            if (currentState == clickpic.CellStateEnum.BLANK) {
                element.className = "puzzlecell blankcell"
            } else if (currentState == clickpic.CellStateEnum.FILLED) {
                element.className = "puzzlecell filledcell"
            } else if (currentState == clickpic.CellStateEnum.DISABLED) {
                element.className = "puzzlecell disabledcell"
            }
        }
    </script>
</head>
<body>
    clickpic
    <hr />

    \/ puzzle \/<br />
    <div id="clickpic"></div>
    /\ puzzle /\<br />
</body>
</html>